
SUB MakePlanets (star_Name$,star_MassKSP,star_RadiusKSP,parentInclination,Max_num_planets,planet_distanceMax,star_FrostLineM):
	'# Planet Gen Start
	'#Note that star_FrostLineM is in meters
	Max_num_planets = 5
	maxPlanets = 5+INT(RND*Max_num_planets) '#how many planets in this system?
	'#maxPlanets = 10
	maxEveWorlds = 3
	numbEveWorlds = 0
	maxKethaneWorlds = 3
	numbKethaneWorlds = 0
	IF maxPlanets > 0 THEN
		planetNumb = 1		
		theSemiMajorAxis = 0
		planet_distanceMin = simpleRocheLimit(star_MassKSP)*1000
		'#planet_distanceMin = simpleRocheLimit(1.7565459e28)*1000
		FOR aPlanet = 1 TO maxPlanets
			'########################
			'#Start out by seeing if the planet is in the LWHZ.
			'#That will determine the template that should be used
			'#STH 2019-0111
			theVariance = 1.4+(RND(1)*(2-1.4))
			IF NOT(theSemiMajorAxis = 0) then
				theSemiMajorAxis = (theSemiMajorAxis * theVariance)
				'#Spacing between planets should be a factor of between 1.4 and 2
				'#theSemiMajorAxis = theSemiMajorAxis+(theSemiMajorAxis * 1.5) 'should be a value between 1.4 and 2.0
			END IF 
			IF theSemiMajorAxis = 0 then
				theSemiMajorAxis = (planet_distanceMin*theVariance)
				'#let the first planet fall somewhere between the roche limit and the frostline'
				'#theSemiMajorAxis = planet_distanceMin + (planet_distanceMin*(RND(1) * (star_FrostLineM- planet_distanceMin)))
			END IF 
			'#What are the limits?
			'#planet_distanceMax is passed in
			'#star_FrostLineM is passed in
			inLEZ = innerLEZ(star_MassKSP)    '#For EVE-like planets 
			outLEZ = innerLWHZ(star_MassKSP)  '#For EVE-like planets 

			inLWHZ = innerLWHZ(star_MassKSP)  '#For Kerbin-like planets 
			outLWHZ = outerLWHZ(star_MassKSP) '#For Kerbin-like planets 

			inLMHZ = innerLMHZ(star_MassKSP)  '#For Liquid-Kethane planets 
			outLMHZ = outerLMHZ(star_MassKSP) '#For Liquid-Kethane planets 
			'#################
			'#See if the body falls within the Eve zone
			isInLEZ$ = "FALSE"
			if (theSemiMajorAxis>inLEZ and theSemiMajorAxis<outLEZ) then
				isInLEZ$ = "TRUE"
			end if
			'#################
			'#See if the body falls within the liquid water habitable zone
			isInLWHZ$ = "FALSE"
			if (theSemiMajorAxis>inLWHZ and theSemiMajorAxis<outLWHZ) then
				isInLWHZ$ = "TRUE"
			end if
			'#################
			'#See if the planet falls within the liquid methane habitable zone
			isInLMHZ$ = "FALSE"
			if (theSemiMajorAxis>inLMHZ and theSemiMajorAxis<outLMHZ) then
				isInLMHZ$ = "TRUE"
			end if


			'########################'
			'###Whether a body is in the LEZ or not is different than whether the max number of bodies have been made
			makeLEBody$ = "FALSE"
			if isInLEZ$ = "TRUE" and (numbEveWorlds < maxEveWorlds) then
				'#~50% chance of making an world
				if INT(RND*2) = 1 then
					makeLEBody$ = "TRUE"
				end if
			end if
			'########################'
			'###Whether a body is in the LMZ or not is different than whether the max number of kethane bodies have been made
			makeLKBody$ = "FALSE"
			if isInLMHZ$ = "TRUE" and (numbKethaneWorlds < maxKethaneWorlds) then
				'#~33% chance of making a kethane world
				if INT(RND*3) = 1 then
					makeLKBody$ = "TRUE"
				end if
			end if
			'######################'
			'#For world debugging, set things to true
			'isInLWHZ$ = "TRUE"

			'isInLMHZ$ = "TRUE"
			'makeLKBody$ = "TRUE"

			'isInLEZ$ = "TRUE"
			'makeLEBody$ = "TRUE"

			'########################'
			'###The code will place as many water worlds in the LWHZ as possible
			'###but there are limits placed on the number of kethane worlds since
			'###the zone is very large and extends to the end of the star's SOI.
			'###Lack of limits means the system will _only_ have kethane worlds once 
			'###the SMA reaches the LKHZ
			'###STH 2019-0523
			'########################'

			'########################'
			'###Planet template
			if isInLWHZ$ = "FALSE" and makeLKBody$ = "FALSE" and makeLEBody$ = "FALSE" then
				'#Pick a random planet template from what is read in'
				keyIndex = 1 + INT(RND * (UBOUND(planetKey$))) 'want the range to be from 1 to end. Index 0 is the header
				PLANETTYPE$ = planetKey$(keyIndex)
				PLANETDESC$ = thePlanetDesc$(keyIndex)
				PLANETRADIUS = thePlanetRadius(keyIndex)
				PLANETMASS = thePlanetMass(keyIndex)
				PLANETSTOCK$ = thePlanetStock$(keyIndex)
				PLANETSOI = thePlanetSOI(keyIndex) 'really, this should be calculated from mass'
				'########################'
				'###Fill in basic body data'
				IF PLANETSTOCK$ = "TRUE" THEN
					aBodyNode$ = "Body"+chr$(13)
					templateNode$ = "Template"+chr$(13)+"        {"+chr$(13)+"            name = "+ PLANETTYPE$+chr$(13)+"        }"
				END IF
				'# ELSE statements don't seem to work in included code
				IF NOT (PLANETSTOCK$ = "TRUE") THEN
					aBodyNode$ = "+Body[" + PLANETTYPE$ + "]"+chr$(13)
					templateNode$ = ""
				END IF
			end if
			if isInLWHZ$ = "TRUE" then
				'#Limit to the laythe template for now.
				'#Should eventually be able to use Kerbin, Eve, or Laythe
				PLANETTYPE$ = "Laythe"
				PLANETDESC$ = ""
				PLANETRADIUS = 600000
				PLANETMASS = 5.2915158E+22
				PLANETSTOCK$ = "TRUE"
				PLANETSOI = kspSOI(star_MassKSP, PLANETMASS, theSemiMajorAxis)
				aBodyNode$ = "Body"+chr$(13)
				templateNode$ = "Template"+chr$(13)+"        {"+chr$(13)+"            name = "+ PLANETTYPE$+chr$(13)+"            removePQSMods = PQSLandControl,VertexHeightMap,PQSCity,VertexHeightNoise,VertexHeightNoiseVertHeight,VertexSimplexHeightMap"+chr$(13)+"        }"
			end if
			if makeLKBody$ = "TRUE" then
				'#Limit to the laythe template for now.
				'#Should eventually be able to use Kerbin, Eve, or Laythe
				PLANETTYPE$ = "Laythe"
				PLANETDESC$ = ""
				PLANETRADIUS = 600000
				PLANETMASS = 5.2915158E+22
				PLANETSTOCK$ = "TRUE"
				PLANETSOI = kspSOI(star_MassKSP, PLANETMASS, theSemiMajorAxis)
				aBodyNode$ = "Body"+chr$(13)
				templateNode$ = "Template"+chr$(13)+"        {"+chr$(13)+"            name = "+ PLANETTYPE$+chr$(13)+"            removePQSMods = PQSLandControl,VertexHeightMap,PQSCity,VertexHeightNoise,VertexHeightNoiseVertHeight,VertexSimplexHeightMap"+chr$(13)+"        }"
			end if
			if makeLEBody$ = "TRUE" then
				'#Limit to the laythe template for now.
				'#Should eventually be able to use Kerbin, Eve, or Laythe
				PLANETTYPE$ = "Eve"
				PLANETDESC$ = ""
				PLANETRADIUS = 700000
				PLANETMASS = 1.2243980E+23
				PLANETSTOCK$ = "TRUE"
				PLANETSOI = kspSOI(star_MassKSP, PLANETMASS, theSemiMajorAxis)
				aBodyNode$ = "Body"+chr$(13)
				templateNode$ = "Template"+chr$(13)+"        {"+chr$(13)+"            name = "+ PLANETTYPE$+chr$(13)+"            removePQSMods = PQSLandControl,VertexHeightMap,PQSCity,VertexHeightNoise,VertexHeightNoiseVertHeight,VertexSimplexHeightMap"+chr$(13)+"        }"
			end if

			'########################'
			'###Planet name
			'#2017-0201 STH This could be turned into a CSV file of roman numerals read into an array
			IF planetNumb = 1 THEN PNM$ = "I"
			IF planetNumb = 2 THEN PNM$ = "II"
			IF planetNumb = 3 THEN PNM$ = "III"
			IF planetNumb = 4 THEN PNM$ = "IV"
			IF planetNumb = 5 THEN PNM$ = "V"
			IF planetNumb = 6 THEN PNM$ = "VI"
			IF planetNumb = 7 THEN PNM$ = "VII"
			IF planetNumb = 8 THEN PNM$ = "VIII"
			IF planetNumb = 9 THEN PNM$ = "IX"
			IF planetNumb = 10 THEN PNM$ = "X"
			thePlanetName$ = star_Name$ +" "+ PNM$

			'########################'
			'###Fill in orbit data'
			theReferenceBody$ = star_Name$
			theColour$ = ""
			theMode$ = ""
			'#the inclination of the planet should be close to the plane of the parent star
			'#https://en.wikipedia.org/wiki/Orbital_inclination
			tempVar=int(rnd*0.5)
			theInclination$=str$(int(parentInclination+tempVar))
			'#allow rare planets to have orbits that deviate a lot from the orbital planet'
			if RND>0.9 then
				tempVar=int(rnd*45.0)
				theInclination$=str$(parentInclination+tempVar)
			end if
			theEccentricity$ = ""

			theLongitudeOfAscendingNode$ = "0"
			theArgumentOfPeriapsis$ = STR$(INT(RND * 300))
			theMeanAnomalyAtEpoch$ = STR$(0)
			theEpoch$ = STR$(0)

			'########################'
			'###Fill in property data'
			'#moved the property data code to take advantage of orbital values in description'
			if PLANETDESC$ = "" then
				PLANETDESC$ = "Semimajor axis:\\nn "+str$(theSemiMajorAxis)+"m\\nn \\nnArg. of periapsis: "+theArgumentOfPeriapsis$+"°\\nn \\nnInclination: "+theInclination$+"°\\nn \\nnTidal locked: unknown\\nn \\nnLWZ zone: "+isInLWHZ$+"\\nn \\nnLMZ zone: "+isInLMHZ$
			end if
			aPropertiesTemplate$ = thePropertiesTemplate$
			'#(aTemplate$, theDescription$, theRadius$, theMass$, theGravParam$, theGeeASL$, theDoesRotate$, theRotationPeriod$, theInitialRotation$, theIsTidallyLocked$, theIsHomeWord$, inLWHZ$, inLMHZ$, theSOI$)
			aPropertiesNode$ = propertyNode$(aPropertiesTemplate$, PLANETDESC$, STR$(PLANETRADIUS), STR$(PLANETMASS), "", "", "", "", "", "", "", isInLWHZ$, isInLMHZ$, STR$(PLANETSOI))
			'########################'
			aOrbitTemp$ = theOrbitTemplate$
			aOrbitNode$ = orbitNode$(aOrbitTemp$, theReferenceBody$, theColour$, theMode$, theInclination$, theEccentricity$, STR$(theSemiMajorAxis), theLongitudeOfAscendingNode$, theArgumentOfPeriapsis$, theMeanAnomalyAtEpoch$, theEpoch$)		

			'########################'
			'###10% chance of having a ring
			'RINGS = INT(RND * 10)
			'RINGS = 0
			'IF RINGS = 0 THEN
			''	'#theAngle$ = "0"
			''	theAngle$ = theInclination$
			''	theOuterRadius$ = "3000"
			''	theInnerRadius$ = "2000"
			''	theRingTexture$ = ltrim$(str$(INT(RND * 3) + 1))
			''	theColour$ = "1.0,0.1,0.1,1.0"
			''	theLockRotation$ = "false"
			''	theUnlit$ = "false"
			''	aRingsTemp$ = theRingsTemplate$
			''	aRingNode$ = ringNode$(aRingsTemp$, theAngle$, theOuterRadius$, theInnerRadius$, theRingTexture$, theColour$, theLockRotation$, theUnlit$)
			'END IF

			'########################''
			'###ScaledVersion template

			'#############
			'#For writing data for PsiCartographer
			isProcedural$ = "FALSE" 

			if isInLWHZ$ = "TRUE" or makeLKBody$ = "TRUE" or makeLEBody$ = "TRUE" then
				isProcedural$ = "TRUE"
				hasProcedural$ = "TRUE" 
				aScaledVersionNode$ = theScaledVersionTemplate$
				'#NOTE: else statements don't work in imported code in qb64
				'#a lack of 'else' makes this pretty messy looking
				if isInLEZ$ = "TRUE" then
					rimColorRamp$ = "BUILTIN/purple_atmogradiant"
					texture$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/purplecolor.png"
					normals$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/greycolor.png"					
				end if

				if isInLWHZ$ = "TRUE" then
					rimColorRamp$ = "BUILTIN/AerialRampKerbin2"
					texture$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/oceancolor.png"
					normals$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/greycolor.png"
				end if

				if isInLMHZ$ = "TRUE" then
					rimColorRamp$ = "BUILTIN/desert_atmogradient"
					texture$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/kethanecolor.png"
					normals$ = "To-Boldly-Go/Data_Folder/textures/solidplanettextures/greycolor.png"	
				end if

				if PSYCART$ = "y" then
					texture$ = "Psi-Cartographer/PluginData/"+thePlanetName$+"/ColorMap/Tile0000.png"
					normals$ = "Psi-Cartographer/PluginData/"+thePlanetName$+"/NormalMap/Tile0000.png"
				end if	

				aScaledVersionNode$ = scaledVersionNode$(aScaledVersionNode$, texture$, normals$, rimColorRamp$)	
				'########################'
				'###Ocean template
				aOceanNode$ = theOceanTemplate$
				if isInLEZ$ = "TRUE" then
					oceanColor$ = "0.266666681,0.243137255,0.305882365,1"
					oceanHeight$ = "0"
					density$ = "1.5"
					color$ = "0.524246514,0.461349964,0.567164183,1"
					oceanColorFromSpace$ = "0.470588237,0.360784322,0.545098066,1"
					specColor$ = "0.0148983598,0.0148983598,0.0148983598,1"
					waterTex$ = "BUILTIN/quiet"
					waterTex1$ = "BUILTIN/quiet"
					fogColor$ = "0.917910457,0.917910457,1,1"
					fogColorRamp$ = "BUILTIN/purple_atmogradiant"
					fogColorEnd$ = "0,0.0850000009,0.122500002,1"
					fogColorStart$ = "0.379999995,0,0.49000001,1"
				end if
				if isInLWHZ$ = "TRUE" then
					'#oceanColor$ = "0.413805217,0.387094229,0.514925361,1"
					oceanColor$ = "0.0705882385,0.101960786,0.156862751,1"
					oceanHeight$ = "0"
					density$ = "1"
					color$ = "0.413805217,0.387094229,0.514925361,1"
					'#oceanColorFromSpace$ = "0.116878122,0.126456618,0.156862751,1"
					oceanColorFromSpace$ = "0.0695908442,0.10210041,0.156716406,1"
					specColor$ = "1,1,1,1"
					waterTex$ = "BUILTIN/sea-water8"
					waterTex1$ = "BUILTIN/sea-water1"
					fogColor$ = "0.321443439,0.611232221,0.947761178,1"
					fogColorRamp$ = "BUILTIN/blue_atmogradient"
					fogColorEnd$ = "0,0.0850000009,0.122500002,1"
					fogColorStart$ = "0,0.340000004,0.49000001,1"
				end if
				if makeLKBody$ = "TRUE" then
					oceanColor$ = "0.2274,0.2823,0.2313,1"
					oceanHeight$ = "0"
					density$ = "2"
					color$ = "0,0.49000001,0.340000004,1"
					oceanColorFromSpace$ = "0,0.49000001,0.340000004,1"
					specColor$ = "0.0148983598,0.0148983598,0.0148983598,1"
					waterTex$ = "BUILTIN/quiet"
					waterTex1$ = "BUILTIN/quiet"
					fogColor$ = "0.917910457,0.917910457,1,1"
					fogColorRamp$ = "BUILTIN/desert_atmogradient"
					fogColorEnd$ = "0,0.1225,0.085,1"
					fogColorStart$ = "0,0.49000001,0.340000004,1"
				end if
				aOceanNode$ = oceanNode$(aOceanNode$, oceanColor$, oceanHeight$, density$, color$, oceanColorFromSpace$, specColor$, waterTex$, waterTex1$, fogColor$, fogColorRamp$, fogColorEnd$, fogColorStart$)	
				'########################'
				'###PQS template	
				vertexSimplexHeightAbsoluteSeed$ = str$(int(RND * 200)+1)
				vertexSimplexHeightDeformity$ = str$(int(RND * 10000)+1)
				vertexSimplexHeightOctives$ = str$(int(RND * 20)+1)
				vertexSimplexHeightFrequency$ = str$(int(RND * 10)+1)
				
				vertexHeightNoiseSeed$ = str$(int(RND * 10)+1)

				voronoiCratersSimplexSeed$ = str$(int(RND * 200000)+1)
				voronoiCratersVoronoiSeed$ = str$(int(RND * 1000)+1)
				'###city2 values
				city2Altitude$ = "-600000"
				city2Latitude$ = "0.0" '#str$((rnd*180)-90)
				city2Longitude$ = "0.0" '#str$((rnd*360)-180)
				city2isCommnetStation$ = "True"
				city2isKSC$ = "False"
				city2Name$ = thePlanetName$+"_test"
				city2ModelPath$ = "To-Boldly-Go/Data_Folder/models/Monolith"
				city2Scale$ ="100,100,100"

				aCity2Temp$ = theCity2Template$
				aCity2Node$ = city2Node$(aCity2Temp$, city2Altitude$, city2Latitude$, city2Longitude$, city2isCommnetStation$, city2isKSC$, city2Name$, city2ModelPath$, city2Scale$)

				aPQSTemp$ = thePQSTemplate$
				aPQSNode$ = PQSNode$(aPQSTemp$, vertexSimplexHeightAbsoluteSeed$, vertexSimplexHeightDeformity$, vertexSimplexHeightOctives$, vertexSimplexHeightFrequency$, vertexHeightNoiseSeed$,   voronoiCratersSimplexSeed$, voronoiCratersVoronoiSeed$, aCity2Node$)
			end if

			'########################'
			'########################'
			'###Debug template
			aDebugNode$ = theDebugTemplate$



			'########################'
			aPlanetTemp$ = thePlanetTemplate$
			'FUNCTION planetTempSubstitution$ (aTemplate$, aBodyNode$, aName$, aTemplateNode$, aPropertiesNode$, aOrbitNode$, aScaledVerionNode$, aRingNode$, aAtmosphereNode$, aPQSNode$, aOceanNode$, aDebugNode$)
			aPlanetTemp$ = planetTempSubstitution$ (aPlanetTemp$, aBodyNode$, thePlanetName$, templateNode$, aPropertiesNode$, aOrbitNode$, aScaledVersionNode$, aRingNode$, "", aPQSNode$, aOceanNode$, aDebugNode$)

			'#Clear out the nodes so they are not populated next iteration
			'#Failing to do so led to oddities with ocean and ring nodes appearing everywhere
			aBodyNode$ = ""
			templateNode$ = ""
			aPropertiesNode$ = ""
			aOrbitNode$ = ""
			aRingNode$ = ""
			aScaledVersionNode$ = ""
			aOceanNode$ = ""
			aPQSNode$ = ""
			aCity2Node$ = ""
			aDebugNode$ = ""
			print #1, aPlanetTemp$

			'########################
			'#add planet to the researchBody file
			ignoreLevels$ = ignoreLevels$ + "        "+thePlanetName$ +" = true false false false"+chr$(10)
			if PLANETRADIUS>=300500 then
				localizationText$ = localizationText$+ "        #autoLOC_RBodies_discovery_"+thePlanetName$+ " = " + thePlanetName$ + " -- Orbiting: "+star_Name$+"\\nn  \\nnSemimajor axis: "+str$(theSemiMajorAxis)+"m\\nn \\nnArg. of periapsis: "+theArgumentOfPeriapsis$+"°\\nn \\nnInclination: "+theInclination$+"°\\nn \\nnTidal locked: unknown\\nn \\nnHabitable zone: unknown"+chr$(10)
				
				discoveryText$ = discoveryText$+"        #autoLOC_RBodies_discovery_"+thePlanetName$+chr$(10)
    		end if
    		if PLANETRADIUS<300500 then
				discoveryText$ = discoveryText$+"        //"+thePlanetName$+" is too small"+chr$(10)
			end if

			'########################'
			'####add planet data to EnvironVisEnhanc file
			if isInLWHZ$ = "TRUE" or makeLKBody$ = "TRUE" or makeLEBody$ = "TRUE" then
				'#2019-0522 SVE uses the following cloud types for _MainTex stock planets:
				'#eve1, LaytheClouds, kerbin1, DunaClouds, hadrianClouds00
				'#2019-0522 SVE uses the following cloud types for _DetailTex stock planets:
				'#eDetailLow, detailCumulus, detail1
				if isInLEZ$ = "TRUE" then
					theClouds1$ = "eve1"
					theClouds2$ = "hadrianClouds00"
					theClouds3$ = "LaytheClouds"
					aEVETemplate$ = theEveEVETemplate$
					numbEveWorlds = numbEveWorlds +1
				end if
				if isInLWHZ$ = "TRUE" then
					theClouds1$ = "DunaClouds"
					theClouds2$ = "eve1"
					theClouds3$ = "hadrianClouds00"
					aEVETemplate$ = theWaterEVETemplate$
				end if
				if makeLKBody$ = "TRUE" then
					theClouds1$ = "eve1"
					theClouds2$ = "hadrianClouds00"
					theClouds3$ = "eve1"
					aEVETemplate$ = theKethaneEVETemplate$
					numbKethaneWorlds = numbKethaneWorlds +1
				end if
				theEVETemplate$ = theEVETemplate$ + forEnvironVisEnhanc$(aEVETemplate$, thePlanetName$, theClouds1$, theClouds2$, theClouds3$)
				'#print #30, aEVETemplate$
				aEVETemplate$ =""
			end if

			'########################'
			'####add planet data to Psi Cartographer file
			if isProcedural$ = "TRUE" then
				'###########
				'###Make the researchBodies mod file
				aCartographerTemplate$ = theCartographerTemplate$
				theCartographerData$ = theCartographerData$ + forPsiCartographer$(aCartographerTemplate$, thePlanetName$)
				aCartographerTemplate$ = ""
			end if 

			'########################'
			'####
			'#25% chance of there being a moon
			'#CALL MakeMoons(thePlanetName$,parentInclination,PLANETRADIUS,4,isInLWHZ$,isInLMHZ$)
			
			planetNumb = planetNumb + 1
			POBJECTNUMBER = POBJECTNUMBER + 1

		NEXT

		IF ASTTOG$ = "y" THEN
			CALL MakeAsteroids(star_Name$,2)
		END IF
	END IF
	
		
END SUB
